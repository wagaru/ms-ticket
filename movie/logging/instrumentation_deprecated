package logging

import (
	"fmt"
	"time"

	"github.com/go-kit/kit/metrics"
	"github.com/wagaru/ticket/movie/service"
)

type instrumentationMiddleware struct {
	requestCount   metrics.Counter
	requestLatency metrics.Histogram
	countResult    metrics.Histogram
	next           service.MovieService
}

func NewInstrumentationMiddleware(requestCount metrics.Counter, requestLatency metrics.Histogram, countResult metrics.Histogram, next service.MovieService) instrumentationMiddleware {
	return instrumentationMiddleware{
		requestCount,
		requestLatency,
		countResult,
		next,
	}
}

func (im instrumentationMiddleware) Create(title string, duration int, desc string, comeOutDate time.Time) (movieID int, err error) {
	defer func(begin time.Time) {
		lvs := []string{"method", "create", "error", fmt.Sprint(err != nil)}
		im.requestCount.With(lvs...).Add(1)
		im.requestLatency.With(lvs...).Observe(time.Since(begin).Seconds())
	}(time.Now())
	return im.next.Create(title, duration, desc, comeOutDate)
}

func (im instrumentationMiddleware) List(perPage, page int) (_ []*service.Movie, err error) {
	defer func(begin time.Time) {
		lvs := []string{"method", "list", "error", fmt.Sprint(err != nil)}
		im.requestCount.With(lvs...).Add(1)
		im.requestLatency.With(lvs...).Observe(time.Since(begin).Seconds())
	}(time.Now())
	return im.next.List(perPage, page)
}
